---
layout: homework
title: CSCI-UA.0480 - Homework #7
---
<style>
.warning {
    background-color: #ffaabb;
}
</style>


<div class="panel panel-default">
  <div class="panel-heading">Homework #7</div>
  <div class="panel-body" markdown="block">

# ANONYMOUS Q&AIT (AJAX) - __Due Friday, April 19th by 11pm__


## Overview

### Goals / Topics Covered

You'll be using the following concepts:

* XMLHttpRequest (or fetch)
* sending back json from Express

<img src="../resources/img/hw07-qandait/all.gif">
<img src="../resources/img/hw07-qandait/ask.gif">
<img src="../resources/img/hw07-qandait/answer.gif">
<img src="../resources/img/hw07-qandait/read.gif">

### Description

Create a question-and-answer site where anonymous users post questions and answer these questions. You will create this "single page app" using AJAX calls instead of regular page rendering and form submission.

You will:

1. Implement routes to create an API for retrieving reviews and adding new ones
2. Use JavaScript to trigger background requests to the API from the form submit buttons

Use the following resources as reference:

1. [Slides on AJAX Part 1](../slides/20/ajax.html)
2. [Slides on AJAX Part 2](../slides/21/ajax-express.html)
3. [AJAX POST (from Part 2)](../slides/21/ajax-express.html#/47)

Check out the video below to see how the site will work. Pay attention to:

* the button presses
* the changes in the ui
* ...and the network tab
* notice that there are no page refreshes!


### Submission Process

You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub

* __Push__ your changes to the homework repository on GitHub.
* Commits later than that date will be handled on a case-by-case basis.

### Make at Least 3 Commits

* Commit multiple times throughout your development process.
* Make at least 3 separate commits

### Code Structure:

__You should first create an express application that will be served on port 3000__

The structure of the directory you're given looks like this:

```
package.json
src
 ├── app.js
 ├── db.js
 └── public
      ├── index.html  // the 'single' page in your single page web app
      ├── js
      │    └── index.js // write your client side JavaScript here
      └── stylesheets
           └── style.css
```

Note that this will be implemented __as a single page web app__. This means that to implement these features:

1. __create routes that send back JSON__ (essentially create an API)
2. utilize the API by writing client side JavaScript that:
    * constructs an http request by retrieving the values of form elements
    * requests data from url constructed in the background (AJAX)
    * parses the result of the background request
    * modifies the DOM appropriately

### Some of This Project is Already Built for You!

1. Server side code 
	* database setup (a mongoose model, database connection, etc.) is provided through `db.js`
	* a partially implemented Express application is in `app.js`
		* it has basic setup for body parsing, static files, etc.
		* it has stubs for route handlers, but the implementations are left
2. Client side code
	* there are static files present in `public`
	* the html (`index.html`) and css (`style.css`) are already built
	* but the client side JavaScript is not implemented (`index.js`), so you'll have to write all of your client side code there

### Adding New Questions

1. In the route, `POST /questions/add`,  create a new question
    * it should give back a JSON object as the response
    * it should send back the object inserted, if successful
    * otherwise, send back an object with a key called error... with a value containing an error message
2. In the client side, create a button `Add A Question` and add an on click handler to it
    * it should show the provided HTML modal with an AJAX form for submitting questions
    * once the question is submitted, use AJAX POST to send the question to the server and save it in the database
    * in the AJAX callback
      * On success
        * the question is added to the page (can be a `div` or `tr`)
        * the server should send the unique <code>object_id</code> back to the client
        * create an additional empty HTML row with <code>id=object_id</code> right below the question for containing answers later
          * this row contains a button `Post Your Answer` which will be describe in the next section
        * the <code>object_id</code> is for the purpose of dynamically adding answers (use `document.getElelemntById()` with `appendChild()`)
      * On failure
        * display failure messages
    * close the modal and clear all fields


### Adding New Answers

1. In the route, `POST /questions/answers/add`,  create a new answer
    * it should give back a JSON object as the response
    * it should receive the unique <code>object_id</code> from the client
    * use the unique <code>object_id</code> to find associated document (question) in the database
    * update the document with answers sent from the client (by pushing the answer to the array of strings)
    * otherwise, send back an object with a key called error... with a value containing an error message
2. In the client side, add an on click handler to the button `Add Your Answer`
    * it should show the provided modal with an AJAX form for submitting answers
    * once the answer is submitted, use AJAX POST to send the <code>object_id</code> and answer to the server
    * you can send the <code>object_id</code> to the server by retrieving the <code>object_id</code> from
      * a hidden input (save it during the callback of `/questions/add`)
      * parsing the id string of HTML elements
    * in the AJAX callback
      * On success
        * the user's answer is added to the row created for the question
      * On failure
        * display failure messages
    * close the modal and clear all fields

### Creating Modal

1. Use the following HTML as a basic modal
  <pre><code data-trim contenteditable>
    &lt;div id="modal-question" class="modal"&gt;
        &lt;div class="modal-content"&gt;
            &lt;span class="close" id="close-modal"&gt;&times;&lt;/span&gt;
            &lt;input type="button" value="Click Me" /&gt;
        &lt;/div&gt;
    &lt;/div&gt;
  </code></pre>
  (The <code>span</code> tag is a button for closing the modal)
2. Add Javascript code to change the <code>style.display</code> of the entire div element to <code>block</code> when you want to display the modal or <code>none</code> when you close the modal
3. Optionally, add CSS styling to this modal (for example, centering the modal and making the main page light grey when the modal is turned on)

See the movie from earlier in the instructions to check out an example of adding a question and an answer (pay close attention to the network tab showing the requests).

</div>

</div>

