---
layout: homework
title: CSCI-UA.0480 - Homework #5
---

<div class="panel panel-default">
	<div class="panel-heading">Homework #5</div>
	<div class="panel-body" markdown="block">

# What Was That Sound? (Sessions and Storing Data) - __Monday, Nov 5th, by 11PM__

## Overview

### Goals

This assignment will cover storing and retrieving data in a database and in an in-memory session store. You will:

* use the commandline mongodb client to create a database, collection, and several documents
* use mongoose to read and write data to and from mongodb from an express application
* use pre-built session middleware to read and write data to and from an in-memory session store on a per session basis

### Description

You'll be creating a site where users can post reports of weird sounds they heard. By the end of this project... you should be familiar with:

* writing middleware
* some basic read and write operations with mongodb...
* integrating mongodb with an Express web application using Mongoose 

You'll create a single express application with the following directory layout (when you're done with all of the directions, the folder hierarchy should match the look the same as the one listed below): üìÅ

`/` (project root)

* `package.json`
* `node_modules`
* `.gitignore`
* `.eslintrc.js`
* `/src`
	* `app.js`
	* `public`
		* `img`
		* `css`
			* your css file
	* `views`
		* `layout.hbs`
		* any other views

Your application will support the following routes:

* `GET /` - show all sounds
* `GET /sounds/add` - show the add sound form
* `POST /sounds/add` - process a new sound
* `GET /sounds/mine` - show the sounds added during the user's session

Finally, it should:

* be served on __port 3000__
* be run from the `/src` directory
* use generated absolute paths where necessary (for example use `__dirname` and `public` when creating the public path for express static)

### Submission Process

You will be given access to a private repository on GitHub.

* __Push__ your changes to the homework repository on GitHub.

### (4 points) Make at Least 4 Commits

* Commit multiple times throughout your development process.
* Make at least 4 separate commits - (for example, one option may be to make one commit per part in the homework).


## Part 1 - Setup for Course Sounds App (Storing Data in a Database)

### Installing MongoDB and Preparing Data

* to install MongoDB, use a package manager like apt on Linux or homebrew on MacOS (`brew install mongodb`)...  or follow the [install instructions for your operating system on MongoDB's site](http://docs.mongodb.org/manual/installation/)
* by default, MongoDB does not require a username/password to connect üòÆ
	* if you'd like to add authentication [you can follow this guide](https://docs.mongodb.com/manual/tutorial/enable-authentication/) (it's a little bit of work to make it so that your app works with authentication on your environment, but without authentication on the grader's environment)
	* if you add authentication, make sure to:
		* (ideal) use environment variables (`process.env`) to set the username and password (but default to no credentials if environment variable(s) are not set)
		* (also ideal) read the username and password from a configuration file, but don't put the configration file under version control (and perhaps read a different file based on an environment variable in `process.env`)
		* (not great, but easy) commit and push the version with no credentials, and keep the version with credentials locally ... remembering to never commit and push that particular file
* in order for you to connect to your database to work with data, your database server must be running
	* for some installations, MongoDB will start when your computer starts
	* for other installations, you'll have to start it manually
	* you can test if your database is running by:
		* attempting to connect to the test database ‚ö°
		* in a terminal window, type in <code>mongo</code> (in any directory) to start the commandline client
		* you should be given a message with the version number of the Mongo shell
	* if it's not running, you have to start the database server manually:
		* in a terminal window, type in <code>mongod</code>; this starts the server
		* if it does not start because it's looking for a directory called <code>/data/db</code>
			* this means that <code>mongod</code> is looking for a place to store you data
			* this typically happens on OSX installations, sooo...
			* [check the docs](https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/#run-mongodb)... and then try:
			* create the directory: <code>sudo mkdir -p /data/db</code>
			* change the owner to your user (replace yourusername with your _actual_ username for you system): <code>sudo chown -R yourusername:staff /data/</code>
		* ensure that it is up and running by connecting to it using a commandline client... so in a different terminal tab/window, type in <code>mongo</code>:
* once you're connected with a commandline client (mongo), start inserting documents into a database called <code>hw05</code> and a collection called <code>sounds</code>:
	* sounds will have a sound name, place of where it was heard, date where it was heard (as a string in the format YYYY-MM-DD), hour the sound was heard (in EST, 00-23 format), and description of the sound
	* so to insert, just do this in the commandline client:
		<pre><code data-trim contenteditable>db.sounds.insert({
			what: "clatter",
			where: "the factory",
			date: "2000-05-17",
			hour: 9,
			desc: "before a crash and a clack"
		});
</code></pre>
	* (inserting will automatically create the database and collection for you if they don't already exist)
	* insert the following sounds:
		<pre><code data-trim contenteditable>
			clatter, the factory, 2000-05-17, 9, before a crash and a clack
			crash, the factory, 2000-05-17, 10, after a clatter but before a clack
			clack, the factory, 2000-05-17, 11, after a clatter and a crash
</code></pre>
* use <code>db.sounds.find()</code> to show all of the sounds that you've inserted
	* make sure there's _something_ there...
	* so that you know your web app actually has sounds to read!
* use <code>ctrl + d</code> to exit the commandline client
* (make sure you keep your database server running, though üèÉ)

### Directory Structure and Dependencies

Start your usual express app by:

* create a `.gitignore` to make sure your `node_modules` folder doesn't get into your repository
* copying over an eslint configuration, `.eslintrc.json`, from a previous assignment
* creating a `package.json` file with `npm init`
* installing the appropriate modules and saving them to `package.json` using <code>--save</code> (this should have already been done from the previous parts)  in the root directory of your project
* additionally, installing __mongoose__: <code>npm install --save mongoose</code>
* creating a `src` directory... and within that directory
	* creating an `app.js` file for your express app
	* activate express-static and create a `public` folder (along with some folders for css, etc.)
	* configure hbs as the templating engine and create a `views` folder along with `layout.hbs`
	* activate express.urlencoded (body parser) to parse http request bodies
	* setting up and creating the appropriate folders for templating and serving static files
* configure your server __so that it uses port 3000__

### Connect to the Database

Create a file called <code>db.js</code> within `src`. <code>db.js</code> will contain:

* the code to connect to our database
* ...and our Schema and model (which we'll use to access data in our database)

In <code>db.js</code>, add the require for the <code>mongoose</code> module:

<pre><code data-trim contenteditable>const mongoose = require('mongoose') </code></pre>

Leave a placeholder for your schema...

<pre><code data-trim contenteditable>// my schema goes here!</code></pre>

And, finally, add the code that connects to the database. We'll connect to the local instance of MongoDB, and we'll use a database called <code>hw05</code> (this will be created for you once you start inserting documents... which you should have done already above!).

<pre><code data-trim contenteditable>mongoose.connect('mongodb://localhost/hw05');
</code></pre>

 __If you get deprecation warnings, [check out these slides](../slides/14/mongoose.html#/8)__ 

Or... with authentication

### Optionally Add Authentication

Enabling authentication in mongodb requires:

1. that authentication is required in certain environments (for example, your laptop or a production environment)
2. authentication is not required in other environments (for example, for the grader)
3. any authentication configuration is __not contained in the repository__

This requires performing the following steps:

1. [enable authentication for mongodb](https://docs.mongodb.com/manual/tutorial/enable-authentication/)
2. conditionally include a file that contains credentials

The connection string placed into `mongoose.connect` will either be the same as shown earlier, or with authentication:

<pre><code data-trim contenteditable>mongodb://USERNAME:PASSWORD@localhost/hw05
</code></pre>

Where:

* `USERNAME` - is the username you used for logging it to the server
* `PASSWORD` - is the password for __mongodb__ that you created from Part 3.


You should not put these credentials directly into your `db.js` file, and they should not be in a file in version control (you may inadvertently disclose these credentials if your repository becomes public). One way to deal with this issue is to put your credentials in an external file that is conditionally read:

1. add a conditional to your database configuration code that...
2. checks if an environment variable named `NODE_ENV` is set to `DEV`
    * [read the excellent digital ocean summary regarding environment variables](https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps)
    * use [process.env.NAME_OF_VARIABLE] to access environment variables through node
3. if the above is true, then read a file synchronously (blocking) by using [fs.readFileSync](https://nodejs.org/api/fs.html#fs_fs_readfilesync_file_options)
4. the file that is read in will be a `json` file that's not in version control... that contains the database connection string for your application when deployed on the server

(Note that this is a simple way of managing configuration, consider using a configuration management library, like [node-convict](https://github.com/mozilla/node-convict) for your professional projects)

__To add an external configuration file, follow these steps__ &rarr;

1. add `config.json` to your `.gitignore` so that your credentials don't inadvertently get committed
2. in `db.js` add the following code before `mongoose.connect`:
    <pre><code data-trim contenteditable>// is the environment variable, NODE_ENV, set to DEV? 
let dbconf;
if (process.env.NODE_ENV === 'DEV') {
    // if we're in DEV mode, then read the configration from a file
    // use blocking file io to do this...
    const fs = require('fs');
    const path = require('path');
    const fn = path.join(__dirname, 'config.json');
    const data = fs.readFileSync(fn);

    // our configuration file will be in json, so parse it and set the
    // conenction string appropriately!
    const conf = JSON.parse(data);
    dbconf = conf.dbconf;
} else {
    // if we're not in DEV mode (the graders are testing your work), then use
    dbconf = 'mongodb://localhost/hw05';
}
</code></pre>
3. when you use `mongoose.connect`, pass in the variable, `dbconf`, as the argument instead of a hardcoded string
    * `mongoose.connect(dbconf);`
4. you can test that everything works by:
    * try running your application __locally__ (on your own computer) without any environment variables (just use `node app.js` or `./bin/www`)
		* and note that your connection _should_ fail due to bad credentials (if you've configured mongodb with authenticaiton)
    * then... create a `config.json` with a single json object in it:
        * the key int the object should be `"dbconf"` (remember that json keys are double quoted)
        * the value should be `"mongodb://username:password@localhost/hw05"`
        * `{"dbconf":"mongodb://username:password@localhost/hw05"}
    * then, run your application again, this time forcing your app to use the config file
        * `NODE_ENV=DEV node app.js` or `NODE_ENV=DEV ./bin/www`
    * __DO NOT COMMIT__ `config.json` (in fact, it should be in your `.gitignore` as the previous instructions specify)
    * (you'll create a `config.json` on the server)

Note, another method for using authentication is to pass in an object with options as the second argument (again, these options should be brought in from a config file)::

<pre><code data-trim contenteditable>
mongoose.connect(
	"mongodb://localhost/hw05",
	{
		auth: {
			authdb:"admin",
			user: "username",
			password: "password"
		}
	}
)
</code></pre>

### Schema

For larger projects, there is usually one file per schema, all located in a separate folder called models. For now, however, define the following Schema within <code>db.js</code>. Check out the slides on:

* [the MongoDB Demo](../slides/14/mongo.html)
* [and/or the Mongoose API](../slides/14/mongoose.html)
* (or alternatively [check out the docs!](http://mongoosejs.com/docs/guide.html))

Since we're storing reports of sounds, we'd like each document to have:
* sound name (a <code>String</code>)
* place of where it was heard  (a <code>String</code>)
* date where it was heard (a <code>String</code> in the format YYYY-MM-DD)
* hour the sound was heard (a <code>Number</code> in EST, 00-23 format)
* description of the sound (a <code>String</code>)

Create a schema based on the above slides, and insert your code under your <code>// my schema goes here!</code> comment.

Then, use your schema to define your model... the model is used as a constructor to create new documents... or as an object with methods that allows the read or update of existing documents.

You can place the following code after your schema and before the connection (assuming that you're schema looks something like this) so that mongoose is aware that your model exists (it _registers_ our model so that you can retrieve it later):

<pre><code data-trim contenteditable>mongoose.model("Sound", soundSchema)</code></pre>

## Part 2 - Displaying All Sounds, Adding Styles, and Adding Navigation

### Overview

We'll be using mongoose to read in all of the sounds from the database. Then, we'll be able to display the sounds in a table.

### Details

There's a bunch of setup that we need in order to integrate our databases access code with our express app:

* in <code>app.js</code>, require the <code>db.js</code> file that you created so that the code that you wrote for the Schema and for connecting to the databases is executed
* at the top of <code>app.js</code>, after you've created your application object: <code>require('./db');</code>
* after that, retrieve the model that you registered with mongoose:
	<pre><code data-trim contenteditable>const mongoose = require('mongoose');
const Sound = mongoose.model('Sound');
</code></pre>

You can now use <code>Sound.find</code> to retrieve all of the sounds in your database!

* create a route handler that accepts requests for <code>/</code>
* in that route handler, the callback should use <code>Sound.find</code> to retrieve all sounds!
* <code>find</code> takes a __query object__ (just a regular object) that specifies the criteria for what we're searching for using name/value pairs... for example {year: 2016} would be all sounds for sounds in 2016
* if you leave the query object empty, it'll just give back all sounds
* the second argument for find is yet another callback... this time, it's the function that's executed when mongoose finishes finding stuff for you
* find works like this:
	<pre><code data-trim contenteditable>SomeModel.find({search: criteria}, function(err, varToStoreResult, count) {
  console.log(varToStoreResult); // <---- variable contains found documents!
});
</code></pre>
* so, once you've retrieved stuff from the database, you'll probably want to render your template... so in your callback, call <code>res.render</code>, rendering whatever template you'd like to display your table
* of sound, you'll have to pass in your find results so that you can iterate over them in your template
* in your template, use standard <code>table</code> markup, with each row containing a sound
* try opening your page in your browser to show a table of all sounds: `http://localhost:3000`
* finally, __add styles to your page and add some simple navigation that will appear on this page as well as any other page that you create__
	* to add styles, place a css file in `public/css`
	* use a `link` tag in `layout.hbs` to include it
	* style at your discretion (design will not be taken into account for grading, only the technical aspect of including a stylesheet will be graded)
	* additionally, add the following navigation links (these should appear on every page):
		* all sounds (`/`)
		* add a sound (`/sounds/add`)
		* show only "my" sounds (`/sounds/mine`)
* once you've completed all of the steps above, you should have a page that looks like the image under the Example heading below
	* again, your sites styling, and even copy (that is the text content) does not have to match exactly; it's your decision how to style and what to name your site
	* the following elements are shown in the image below, but do not have to be implemented yet
		* the filter form will be added in the next section
		* the number of session visits will be added later in the instructions

### Example - All Sounds

<img src='../resources/img/hw05-sounds-01-all-sm.gif'>

<hr>

## Part 3 - Filtering

### Overview

In this part of the assignment, you'll add a form to your page that allows you to filter the table by semester, year, and professor's name via GET and query string parameters.

### Details

You already know how to do most of this, but here's a rough sketch of some of the relevant tasks:

* in the same page as your table of sounds, create a form that uses GET
  * it should go to '/' when submitted
  * note that we don't need `req.body` for this since the request should be a GET
  * also... why are we using GET instead of POST? because we're merely reading data... (pretty common convention for search / filter)
* modify your request handler to try to get the value of query string parameters (<code>req.query.nameOfFormElement</code>)
  * for example, submitting your form may result in adding a ?foo=bar to the url
  * to access that name/value pair in the query string on the server side, <code>req.query.foo</code>
* use the value passed in from the form (via GET and the query string) to filter the sounds by director name
* however, instead of passing in an empty query object, `{}`, to find, pass in an object with the appropriate keys and values based on form input
	* the keys should match the property names defined in your schema
	* multiple key / value pairs within the query object behave as if they were combined with `and`...
	* `{foo: 'bar', baz: 'qux'}` would match all documents that have `foo == 'bar' AND baz == 'qux'`
	* [see the mongoose docs](http://mongoosejs.com/docs/api.html#find_find) and [mongodb docs](https://docs.mongodb.com/manual/reference/method/db.collection.find/) for more info on `find`
* see the example below for a filter form in action!

### Example - Filtering Sounds

<img src='../resources/img/hw05-sounds-02-filter-sm.gif'>

<hr>

## Part 4 - Adding a Sound

### Overview

In this part of the assignment, you'll create another page that contains a form to add new sounds. The form will POST data... and then redirect back to <code>/</code>.

### Details

Again, you've already done something similar in a previous assignment (using an in-memory store), but here's a rough sketch of some of the relevant tasks:

* make sure that the following steps from earlier in the instructions have been completed:
	* check that a link to `/sounds/add` has been created in all of your pages
	* ...and that you are able to parse http POST request bodies so that `req.body` is available
* create the appropriate route handlers that accepts requests for <code>/sounds/add</code>
* you'll two route handlers for `/sounds/add`: one for showing the form and one form processing the form
    * GET will handle showing the form
        * create another template file
        * add a form to your template
    * POST will handle the form submission
        * your request handler that deals with POSTs will create a new sound in the database... [check out the slides](../slides/14/mongo.html)
		* when it's done, it should redirect back to the page that shows all of the sounds

### Example - Adding a Sound

<img src='../resources/img/hw05-sounds-03-add-sm.gif'>

<hr>

## Part 5 - Pages Visited (by session)

Now that we have basic adding and filtering done, it's time to add some session based features.  Check out the [the slides on `express-session` middleware](../slides/10/sessions.html#/17) before starting (they're near the end of the slides).

Once your familiar with `express-session`, find a way to keep a count of the total number of pages that a user has seen. We can identify users by their session (which `express-session` will generate for us). Consequently, different sessions (for example, visiting the site on two different browsers) will increment different, independent, count totals.

* keep track of the number of times a user has visited any page on the site
* on all pages, display the number of pages a user has visited `Your session's total page visits: [some number]`
	* again, this should be shown on all pages
	* one way to do this is to use `res.locals` ([see the express documentation on res.locals](http://expressjs.com/en/api.html#res.locals))
		* adding a property to `res.locals` makes that value available to __all__ templates (with the property name as the variable name)
		* in the example code in the documentation, middleware is used to create a property on res.locals for __every request__
			<pre><code data-trim contenteditable>app.use(function(req, res, next){
  res.locals.user = req.user;
  res.locals.authenticated = ! req.user.anonymous;
  next();
});
</code></pre>
		* this property will be available in every template rendered (including `layout.hbs`)
		* using the example above, regardless of what template you're in (again, including `layout.hbs`), you can use `user` and `authenticated` as template variables! üëç
	* you'll have to find some way of incrementing a counter variable that's session dependent (that is, different client sessions will have different visit counts) for every page visited, regardless of page / path
	* once you've implemented this, try refreshing the page or flipping back-and-forth between viewing all sounds and adding a sound
	* you should see the counter increment similar to the animation shown in the example section below

### Example - Keeping Track of Number of Pages Visited During Session

<img src='../resources/img/hw05-sounds-05-visit-sm.gif'>

<hr>

## Part 6 - Sound Reports Added (by session)

Finally, create one last page (which makes 3 total), `/sounds/mine`,  showing all of the sounds that have been added by the user during their session.

* you must use the `express-session` middleware to do this ([see the relevant slides](../slides/10/sessions.html#/17))
* there are a few ways to implement this:
	* storing sound objects directly in the session (as well as in the database)
	* or (more complicated) modify your schema / model so that you can store the session id of the session that created a sound
		* `req.session.id` will contain the id for that particular session
* make sure you link to `/sounds/mine` from both of the existing pages so that the graders can see that you've implemented this feature
* the example below assumes that the last report was entered during the user's session... so it shows up under the 'My Sounds' page

### Example - Show The Sound Reports Added for the Session

<img src='../resources/img/hw05-sounds-04-session-sm.gif'>

</div>

</div>

