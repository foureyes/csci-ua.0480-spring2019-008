---
layout: homework
title: CSCI-UA.0480 - Homework #6
---

<div class="panel panel-default">
	<div class="panel-heading">Homework #6</div>
	<div class="panel-body" markdown="block">

# DRAFT

# MemorEmoji (Client Side JavaScript) - __Due 4/12 at 11pm__

## Overview

<img src="../resources/img/hw06-memoremoji/won.gif">

### Goals / Topics Covered

You'll be using the following concepts:

* manipulating the DOM
* setting DOM element attributes
* handling events with addEventListener

### Description

MemorEmoji is a card game in which all of the cards are laid face down on a surface and two cards are flipped face up over each turn. The object of the game is to turn over pairs of matching cards. The player will have a limited number of turns to do this.

You will be making an interface with following components. 

1. A form to set the number of cards, maximum turns, and symbols on cards using a character string
2. A quit button to restart the game 
3. A "board" where the cards are initially laid face down, and flipped face up over each turn
4. A count of the turns taken over the maximum number of turns

<!-- <img src="../resources/img/hw07-forest-01-main.gif"> -->

### Submission Process

You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub

* __Push__ your changes to the homework repository on GitHub.

### Make at Least 4 Commits

* Commit multiple times throughout your development process.
* Make at least 4 separate commits

## MemorEmoji

### __Required Features__

### Create an express application and setup some directories

1. You don't _really_ need an Express application to do this homework, but start with one anyway, in case you decide to do the extra credit...
2. Start a new express project that uses express-static, using the following directory structure:
    * `package.json`
    * `.eslintrc.js`
    * `README.md`
    * `src`
        * `app.js`
        * `public`
            * `index.html`
            * `stylesheets`
                * `style.css`
            * `javascripts`
                * `main.js`
3. (there's no need to create any route handlers for this homework, you can do the whole thing with static files)
4. In your public folder, create an <code>index.html</code> file.
5. In your public folder, create a `stylesheets` folder and a file, `style.css`, within it 
6. In your public folder, create a `javascripts` folder and a file, `main.js`, within it 

__Use the following markup__

1. Add the following code to your <code>index.html</code>:
    <pre><code data-trim contenteditable>
      &lt;!doctype html&gt;
      &lt;html&gt;

        &lt;head&gt;
            &lt;title&gt;Cards!&lt;/title&gt;
            &lt;link rel="stylesheet" href="stylesheets/style.css" type="text/css" media="screen" title="no title" charset="utf-8"&gt;
          
        &lt;/head&gt;


        &lt;body&gt;
			&lt;h1 class="title text-center"&gt;Memory Card Matching&lt;/h1&gt;
			&lt;div class="start text-center"&gt;
				&lt;div&gt;
					&lt;h2&gt;Number of Cards&lt;/h2&gt;
					&lt;input id="card-number" type="text"&gt;
				&lt;/div&gt;
					&lt;h2&gt;Max Turns&lt;/h2&gt;
					&lt;input id="max-turns" type="text"&gt;
				&lt;div&gt;
					&lt;h2&gt;Customized your cards (separated by ,)&lt;/h2&gt;
					&lt;input id="card-faces" type="text"&gt;
				&lt;/div&gt;
				&lt;div&gt;
					&lt;button class="play-btn" type="button"&gt;Game Start&lt;/button&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			&lt;div class="game text-center hidden"&gt;
			&lt;/div&gt;
			&lt;div class="win text-center hidden"&gt;
			&lt;/div&gt;
			&lt;div class="reset text-center hidden"&gt;
				&lt;button class="reset-btn" type="button"&gt;Reset&lt;/button&gt;
			&lt;/div&gt;
			&lt;div class="error-message text-center hidden"&gt;
				Please re-enter the number of cards and max turns again (must be even number)!
				&lt;button class="error-btn" type="button"&gt;Go Back&lt;/button&gt;
			&lt;/div&gt;
			&lt;script src="javascripts/main.js"&gt;&lt;/script&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </code></pre>
5. __You are not allowed to use any additional markup except the script markup__; you must generate any additional elements you'll need with JavaScript, but you can use script markup to load multiple Javascript files
6. All of your JavaScript should go in your external JavaScript file.
7. ... and, of course, all of your CSS should go in your external CSS file.

__Start with a form that allows the user to specify the number of cards in the game and, optionally, the actual "value" / symbol of each card by using a character string of comma separated symbols__
* Only show the content in the h2 with class <code>title</code>, and div with class <code>start</code>
    * Make sure the div with class <code>game</code> , <code>win</code>, <code>reset</code>, and <code>error-message</code> are not displayed
    * Hint:
        * Make the appropriate CSS rules
        * __Use JavaScript's <code>someElementObj.classList</code>'s <code>add</code>, <code>remove</code>, and <code>toggle</code> [to _add and remove_ classes](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList) so that you can control which CSS rules are active__
* Add an event listener to listen for clicks
* When the "Game Start" button is pressed, the even listener should:
  * Determine the value of the input field (you can use whatever method you like to retrieve this 		value)
  * The number of cards should have max value of 36, and should be an even number
    * if either condition is not satisfied
      * the form and the "game start" button should be hidden
      * the error message should be displayed
    * if both conditions are satisfied
      * the form should be removed (or hidden if you're comfortable manipulating style sheets)
      * the game board should be added
  * To customize the symbol of cards, enter a character set separated each one by comma
    * For example, entering "1, 2, 3, 2, 3, 1" will display 6 cards with symbols 1, 2, 3, 2, 3, 1 (all faced down initially)
    * if the user doesn't enter the charset string, and the number of cards are entered, by 				default the symbol of cards are emojis (you can pre-defined them in your code)
  * If the input field for number of cards is empty, display error message and create a "Go Back" button (see below)
* Display the error message with a "Go Back" button:
  * when the error message is displayed, the form and "Game Start" button should be hidden
  * when the "Go Back" button is clicked, the form and "Game Start" button should be displayed

* Here's what the interaction should look like (you won't have any real content on the _next_ page yet, though):
    <!-- <br>
    <img src="../resources/img/hw07-forest-02-start.gif">
    <br> -->

__Generate a game board__
* Based on the number submitted, generate a game board in the <code>game</code> div
* The number of cards should be equal to 2 x the number of symbols (you'll need matching pairs, of course!)
* The cards should be arranged as a square if possible (for example, 8 symbols means 16 cards, which means a 4 x 4 grid)
* If they cannot be a square, then take ceiling of the square root, and use that as the height (square root of 12 gives us 3.4, rounded up is 4, so 4 tall and 3 wide)
* Regardless of the number of cards, the arrangement must be in a grid. Consider using:
  * display: inline-block;
  * a table
  * floated elements
* This game board must be genereated by using <code>document.createElement()</code>, and set their attributes such as class and id. To smooth over element creation, creating a function <code>function createElement(type, attr)</code> returning the element with all attributes added is highly recommended. (See extra credit)
  * an example usage is <code>const ele = createElement('div, {'class': 'class-name'});</code>

__Create a quit button__
* Create a button at the bottom of the page. When this button is clicked, only the div with class <code>start</code> should be displayed.

__Assign a random symbol to each card__

* __NOTE THAT IF THE PLAYER PRESETS THE CARDS__, then use those characters instead of random generation... otherwise...
* Find a way to assign a symbol from the set of available symbols to each card
* The symbol assignment should be randomized!
* The symbol should not appear in the user interface at the beginning of the game
* However, it does not matter if the symbol is viewable in the source code
* Some potential solutions for associating a symbol with a card may include:
	* An object that serves as a lookup table
  * Setting the value as a custom attribute (see chapter 13 in Eloquent JavaScript, 2nd Edition)
  * Perhaps creating an object model that drives your game
  * Randomly choose index to swap cards in different positions
  * Oooorâ€¦ any other scheme that you can come up with

Here's an example of preset cards:

<img src="../resources/img/hw06-memoremoji/preset.gif">

__Allow the user to click on cards__
* Assign an event listener to each card
* When a card is clicked show the card's symbol
  * Either add a text node to the card
  * Or use CSS
    * If you're using CSS, only manipulate the classes, don't assign styles directly
		* Some options for toggling classes include:
			* classList
			* setAttribute
* Do not allow more than two flipped cards at once

__Handle two consecutive clicks / two flipped cards in each turn__
* In the <code>game</code> div, display messages to instruct the player to continue the game
* If there are two cards flipped after two clicks in one turn
  * Display an "OK" button
    * onclick, the game goes to the next turn
  * If two cards don't match
    * flip them back so that the symbols don't show
    * show a message such as "No Match. Press OK" below the game board
  * If two cards do match, leave them around so that the symbols remain revealed
    * show a message such as "Match. Press OK" below the game board
* If there's only one card flipped, allow another card to be flipped
* Again there are matches that are already flipped, don't unflip them

__Keep track of the turns__
* One turn means a player flipped two cards
* Above the game board, show <code>number of turns played / max playing turns</code>
  * For example, displaying <code>TURN 2/4</code> means the player is playing the second turn and can only play 4 turns maximum.
* The result over each turn should be saved in a variable or in a class to represent the state of the game
  * The game state can be as simple as a 2D Array, as sophisticated as a class, or perhaps even embedded in the DOM elements

__Game is over when:__
* The turn played is equal to maximum turns
* All of the revealed cards are matched

__Display results of the game__
* Once the game is over, display the number turns over the max turns and display whether or not the player has won or lost. Here's an example of a loss:

<img src="../resources/img/hw06-memoremoji/lost.gif">

### Optional Features (Extra Credit)

Implement any of the following features

__Create a helper function for creating elements and adding class names and other attributes, like ids__

* See creating nodes in Chapter 13
* But add the ability to have second parameter that contains name value pairs of attributes and their values
* createElement('div', {id: 'foo', class: 'bar'}, 'some text', createElement('p')) â†’
* <div id='foo', class='bar'>some text <p></p></div>

__Pause after two cards are clicked to give the user time to view the cards__
* Use setTimeOut or setInterval and clearInterval

__A reset button to restart the game once the game is over__
* This reset button will restore the page to the page when first loaded.
* Only display the div with class <code>start</code>, hide div with class <code>game</code>, <code>win</code>, <code>reset</code>, and <code>error-message</code>


__At the end of the game, show high scores and have a form that allows a user to post their initials__
* Create a tiny express app to handle this
* Keep the high scores in MongoDB

__Sample Interaction__


</div>
</div>



